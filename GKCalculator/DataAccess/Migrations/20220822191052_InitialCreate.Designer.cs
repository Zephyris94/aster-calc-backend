// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220822191052_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CalculationRoute", b =>
                {
                    b.Property<int>("CalculationsId")
                        .HasColumnType("int");

                    b.Property<int>("RoutesId")
                        .HasColumnType("int");

                    b.HasKey("CalculationsId", "RoutesId");

                    b.HasIndex("RoutesId");

                    b.ToTable("CalculationRoute");
                });

            modelBuilder.Entity("DataAccess.Models.Calculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CalcDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseShip")
                        .HasColumnType("bit");

                    b.Property<bool>("UseSoe")
                        .HasColumnType("bit");

                    b.Property<bool>("UseWyvern")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Calculations");
                });

            modelBuilder.Entity("DataAccess.Models.MoveType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MoveTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NodeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("DataAccess.Models.NodeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NodeTypes");
                });

            modelBuilder.Entity("DataAccess.Models.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int");

                    b.Property<int?>("MoveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("MoveTypeId");

                    b.HasIndex("SourceId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("CalculationRoute", b =>
                {
                    b.HasOne("DataAccess.Models.Calculation", null)
                        .WithMany()
                        .HasForeignKey("CalculationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.Route", null)
                        .WithMany()
                        .HasForeignKey("RoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Models.Node", b =>
                {
                    b.HasOne("DataAccess.Models.NodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");

                    b.Navigation("NodeType");
                });

            modelBuilder.Entity("DataAccess.Models.Route", b =>
                {
                    b.HasOne("DataAccess.Models.Node", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("DataAccess.Models.MoveType", "MoveType")
                        .WithMany()
                        .HasForeignKey("MoveTypeId");

                    b.HasOne("DataAccess.Models.Node", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.Navigation("Destination");

                    b.Navigation("MoveType");

                    b.Navigation("Source");
                });
#pragma warning restore 612, 618
        }
    }
}
